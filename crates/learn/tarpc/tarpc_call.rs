use futures::future::{ self, Ready };
use tarpc::{ client, context, server::{ self, Channel } };

/// This is the service definition. It looks a lot like a trait definition.
/// It defines one RPC, hello, which takes one arg, name, and returns a String.
#[tarpc::service]
pub trait World {
    async fn hello(name: String) -> String;
}

/// This is the type that implements the generated World trait. It is the business logic
/// and is used to start the server.
#[derive(Clone)]
struct HelloServer;

impl World for HelloServer {
    // Each defined rpc generates two items in the trait, a fn that serves the RPC, and
    // an associated type representing the future output by the fn.

    type HelloFut = Ready<String>;

    fn hello(self, _: context::Context, name: String) -> Self::HelloFut {
        future::ready(format!("Hello, {name}!"))
    }
}

// execute와 spawn은 "full" feature로 지정해야 동작한다.
pub async fn process() -> anyhow::Result<()> {
    let (client_transport, server_transport) = tarpc::transport::channel::unbounded();

    let server = server::BaseChannel::with_defaults(server_transport);
    tokio::spawn(server.execute(HelloServer.serve()));

    // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`
    // that takes a config and any Transport as input.
    let client = WorldClient::new(
        client::Config::default(), client_transport
    ).spawn();

    let c1 = client.clone();
    let c2 = client.clone();

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    tokio::spawn(async move {
        let hello = c1.hello(context::current(), "Stim".to_string()).await;
        if let Ok(v) = hello {
            println!("{v}");
        }
    });

    tokio::spawn(async move {
        let hello = c2.hello(context::current(), "Hello".to_string()).await;
        if let Ok(v) = hello {
            println!("{v}");
        }
    });


    Ok(())
}
